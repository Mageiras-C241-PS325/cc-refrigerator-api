<ref *2> Request {
  _allowInternals: false,
  _closed: false,
  _core: <ref *1> {
    actives: WeakMap { <items unknown> },
    app: {},
    auth: { api: {}, settings: [Object] },
    caches: Map(1) { '_default' => [Object] },
    compression: { decoders: [Object], encodings: [Array], encoders: [Object] },
    controlled: null,
    dependencies: [],
    events: {
      _eventListeners: [Map],
      _notificationsQueue: [],
      _eventsProcessing: false,
      _sourcePodiums: []
    },
    heavy: {
      settings: [Object],
      _eventLoopTimer: null,
      _loadBench: [Object],
      load: [Object]
    },
    info: {
      created: 1718637671197,
      started: 1718637674596,
      host: '0.0.0.0',
      port: 7000,
      protocol: 'http',
      id: 'HewPackSan:30304:lxj4hu71',
      uri: 'http://0.0.0.0:7000',
      address: '0.0.0.0'
    },
    instances: Set(3) { [Object], [Object], [Object] },
    listener: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 5,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:7000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 9,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 15645,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 11,
        [Symbol(triggerId)]: 10
      }
    },
    methods: { methods: {} },
    mime: Mimos {},
    onConnection: [Function (anonymous)],
    phase: 'started',
    plugins: {},
    registrations: { authRoutes: [Object], ingredientRoutes: [Object] },
    registring: 0,
    Request: [class Request],
    Response: [class Response],
    requestCounter: { value: 10001, min: 10000, max: 99999 },
    root: {
      _core: [Circular *1],
      app: {},
      auth: [Object],
      decorations: [Object],
      cache: [Function],
      events: [Object],
      info: [Object],
      listener: [Server],
      load: [Object],
      methods: {},
      mime: Mimos {},
      plugins: {},
      registrations: [Object],
      settings: [Object],
      states: [Object],
      type: 'tcp',
      version: '20.3.0',
      realm: [Object]
    },
    router: {
      settings: [Object],
      routes: [Map],
      ids: Map(0) {},
      vhosts: null,
      specials: [Object]
    },
    settings: {
      port: 7000,
      host: '0.0.0.0',
      routes: [Object],
      app: {},
      compression: [Object],
      debug: [Object],
      info: {},
      load: [Object],
      mime: {},
      operations: [Object],
      query: {},
      router: [Object],
      autoListen: true
    },
    sockets: Set(1) { [Socket] },
    started: true,
    states: { settings: [Object], cookies: {}, names: [] },
    toolkit: { _toolkit: [class Toolkit] },
    type: 'tcp',
    validator: null,
    extensionsSeq: 0,
    extensions: { server: [Object], route: [Object] },
    decorations: {
      handler: Map(0) {},
      request: Map(0) {},
      response: Map(0) {},
      server: Map(0) {},
      toolkit: Map(0) {},
      requestApply: null,
      public: [Object]
    }
  },
  _entity: null,
  _eventContext: { request: [Circular *2] },
  _events: null,
  _expectContinue: false,
  _isInjected: false,
  _isPayloadPending: false,
  _isReplied: false,
  _route: {
    method: 'post',
    path: '/ingredients/add',
    settings: {
      cors: [Object],
      cache: [Object],
      compression: {},
      ext: {},
      files: [Object],
      json: [Object],
      log: [Object],
      payload: [Object],
      response: [Object],
      security: null,
      state: [Object],
      timeout: [Object],
      validate: [Object],
      vhost: undefined,
      plugins: {},
      app: {},
      auth: undefined,
      handler: [AsyncFunction (anonymous)]
    },
    _core: <ref *1> {
      actives: [WeakMap],
      app: {},
      auth: [Object],
      caches: [Map],
      compression: [Object],
      controlled: null,
      dependencies: [],
      events: [Object],
      heavy: [Object],
      info: [Object],
      instances: [Set],
      listener: [Server],
      methods: [Object],
      mime: Mimos {},
      onConnection: [Function (anonymous)],
      phase: 'started',
      plugins: {},
      registrations: [Object],
      registring: 0,
      Request: [class Request],
      Response: [class Response],
      requestCounter: [Object],
      root: [Object],
      router: [Object],
      settings: [Object],
      sockets: [Set],
      started: true,
      states: [Object],
      toolkit: [Object],
      type: 'tcp',
      validator: null,
      extensionsSeq: 0,
      extensions: [Object],
      decorations: [Object]
    },
    realm: {
      _extensions: [Object],
      modifiers: [Object],
      parent: [Object],
      plugin: 'ingredientRoutes',
      pluginOptions: {},
      plugins: {},
      _rules: null,
      settings: [Object],
      validator: null
    },
    _special: false,
    _analysis: { segments: [Array], fingerprint: '/ingredients/add', params: [] },
    params: [],
    fingerprint: '/ingredients/add',
    public: {
      method: 'post',
      path: '/ingredients/add',
      vhost: undefined,
      realm: [Object],
      settings: [Object],
      fingerprint: '/ingredients/add',
      auth: [Object]
    },
    _prerequisites: null,
    _extensions: {
      onPreResponse: [Object],
      onPostResponse: [Object],
      onPreAuth: [Object],
      onCredentials: [Object],
      onPostAuth: [Object],
      onPreHandler: [Object],
      onPostHandler: [Object]
    },
    _cycle: [
      [AsyncFunction (anonymous)],
      [AsyncFunction (anonymous)],
      [AsyncFunction (anonymous)]
    ],
    _postCycle: [],
    _marshalCycle: [
      [Function (anonymous)],
      [Function (anonymous)],
      [Function (anonymous)],
      [Function (anonymous)],
      [AsyncFunction (anonymous)],
      [AsyncFunction (anonymous)]
    ]
  },
  _serverTimeoutId: null,
  _states: {},
  _url: null,
  _urlError: null,
  app: {},
  headers: {
    'content-type': 'application/json',
    'user-agent': 'PostmanRuntime/7.29.2',
    accept: '*/*',
    'postman-token': '605cef67-2a00-4030-896d-1c09348e8545',
    host: '0.0.0.0:7000',
    'accept-encoding': 'gzip, deflate, br',
    connection: 'keep-alive',
    'content-length': '42'
  },
  jsonp: null,
  logs: [],
  method: 'post',
  mime: 'application/json',
  orig: {},
  params: {},
  paramsArray: [],
  path: '/ingredients/add',
  payload: { name: 'Tomato', amount: 5 },
  plugins: {},
  pre: {},
  preResponses: {},
  raw: {
    req: IncomingMessage {
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/ingredients/add',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Socket],
      _consuming: true,
      _dumped: false,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    res: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Socket],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [IncomingMessage],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: null,
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    }
  },
  response: null,
  route: {
    method: 'post',
    path: '/ingredients/add',
    vhost: undefined,
    realm: {
      _extensions: [Object],
      modifiers: [Object],
      parent: [Object],
      plugin: 'ingredientRoutes',
      pluginOptions: {},
      plugins: {},
      _rules: null,
      settings: [Object],
      validator: null
    },
    settings: {
      cors: [Object],
      cache: [Object],
      compression: {},
      ext: {},
      files: [Object],
      json: [Object],
      log: [Object],
      payload: [Object],
      response: [Object],
      security: null,
      state: [Object],
      timeout: [Object],
      validate: [Object],
      vhost: undefined,
      plugins: {},
      app: {},
      auth: undefined,
      handler: [AsyncFunction (anonymous)]
    },
    fingerprint: '/ingredients/add',
    auth: { access: [Function: access] }
  },
  query: [Object: null prototype] {},
  server: <ref *3> {
    _core: <ref *1> {
      actives: [WeakMap],
      app: {},
      auth: [Object],
      caches: [Map],
      compression: [Object],
      controlled: null,
      dependencies: [],
      events: [Object],
      heavy: [Object],
      info: [Object],
      instances: [Set],
      listener: [Server],
      methods: [Object],
      mime: Mimos {},
      onConnection: [Function (anonymous)],
      phase: 'started',
      plugins: {},
      registrations: [Object],
      registring: 0,
      Request: [class Request],
      Response: [class Response],
      requestCounter: [Object],
      root: [Circular *3],
      router: [Object],
      settings: [Object],
      sockets: [Set],
      started: true,
      states: [Object],
      toolkit: [Object],
      type: 'tcp',
      validator: null,
      extensionsSeq: 0,
      extensions: [Object],
      decorations: [Object]
    },
    app: {},
    auth: {
      api: {},
      settings: [Object],
      scheme: [Function: bound scheme],
      strategy: [Function: bound _strategy],
      default: [Function: bound default],
      test: [Function: bound test] AsyncFunction,
      verify: [Function: bound verify] AsyncFunction,
      lookup: [Function: bound lookup]
    },
    decorations: { handler: [], request: [], response: [], server: [], toolkit: [] },
    cache: [Function: policy] { provision: [AsyncFunction (anonymous)] },
    events: {
      _eventListeners: [Map],
      _notificationsQueue: [],
      _eventsProcessing: false,
      _sourcePodiums: []
    },
    info: {
      created: 1718637671197,
      started: 1718637674596,
      host: '0.0.0.0',
      port: 7000,
      protocol: 'http',
      id: 'HewPackSan:30304:lxj4hu71',
      uri: 'http://0.0.0.0:7000',
      address: '0.0.0.0'
    },
    listener: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 5,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:7000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 9,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 15645,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 11,
        [Symbol(triggerId)]: 10
      }
    },
    load: { eventLoopDelay: 0, heapUsed: 0, rss: 0 },
    methods: {},
    mime: Mimos {},
    plugins: {},
    registrations: { authRoutes: [Object], ingredientRoutes: [Object] },
    settings: {
      port: 7000,
      host: '0.0.0.0',
      routes: [Object],
      app: {},
      compression: [Object],
      debug: [Object],
      info: {},
      load: [Object],
      mime: {},
      operations: [Object],
      query: {},
      router: [Object],
      autoListen: true
    },
    states: { settings: [Object], cookies: {}, names: [] },
    type: 'tcp',
    version: '20.3.0',
    realm: {
      _extensions: [Object],
      modifiers: [Object],
      parent: null,
      plugin: undefined,
      pluginOptions: {},
      plugins: {},
      _rules: null,
      settings: [Object],
      validator: null
    }
  },
  state: {},
  info: {
    _request: [Circular *2],
    received: 1718637684461,
    referrer: '',
    host: '0.0.0.0:7000',
    hostname: '0.0.0.0',
    id: '1718637684461:HewPackSan:30304:lxj4hu71:10000',
    _remoteAddress: null,
    _remotePort: null,
    acceptEncoding: 'gzip',
    cors: { isOriginMatch: true },
    responded: 0,
    completed: 0
  },
  auth: {
    isAuthenticated: false,
    isAuthorized: false,
    isInjected: false,
    credentials: null,
    artifacts: null,
    strategy: null,
    mode: null,
    error: null,
    [Symbol(auth.payload)]: true
  }
}