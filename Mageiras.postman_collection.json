{
	"info": {
		"_postman_id": "e9bb0c79-ef06-411c-bb99-2cacba574758",
		"name": "Mageiras",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ingredients Update or Add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							" \r",
							"    const expectedMessage = responseJson.data.snapshot.empty ? 'Ingredient added to fridge' : 'Ingredient amount updated successfully';\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals(expectedMessage);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/ingredients/updateOrAdd",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"ingredients",
						"updateOrAdd"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ingredients Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/ingredients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ingredients Get Detail",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/ingredients/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"ingredients",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ingredients Delete",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/ingredients/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"ingredients",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ingredients Delete All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('All ingredients deleted successfully');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/ingredients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ingredients Delete Multiple",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Selected ingredients deleted successfully');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/ingredients/multiple",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"ingredients",
						"multiple"
					]
				}
			},
			"response": []
		}
	]
}